/*
 * This file is generated by jOOQ.
 */
package ca.softwarespace.qiyanna.dataaggregator.models.generated.tables;


import ca.softwarespace.qiyanna.dataaggregator.models.generated.Indexes;
import ca.softwarespace.qiyanna.dataaggregator.models.generated.Keys;
import ca.softwarespace.qiyanna.dataaggregator.models.generated.Qiyanna;
import ca.softwarespace.qiyanna.dataaggregator.models.generated.tables.records.LaneRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Lane extends TableImpl<LaneRecord> {

    private static final long serialVersionUID = -1754933506;

    /**
     * The reference instance of <code>qiyanna.lane</code>
     */
    public static final Lane LANE = new Lane();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LaneRecord> getRecordType() {
        return LaneRecord.class;
    }

    /**
     * The column <code>qiyanna.lane.laneid</code>.
     */
    public final TableField<LaneRecord, Integer> LANEID = createField("laneid", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('lane_laneid_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>qiyanna.lane.name</code>.
     */
    public final TableField<LaneRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(10), this, "");

    /**
     * Create a <code>qiyanna.lane</code> table reference
     */
    public Lane() {
        this(DSL.name("lane"), null);
    }

    /**
     * Create an aliased <code>qiyanna.lane</code> table reference
     */
    public Lane(String alias) {
        this(DSL.name(alias), LANE);
    }

    /**
     * Create an aliased <code>qiyanna.lane</code> table reference
     */
    public Lane(Name alias) {
        this(alias, LANE);
    }

    private Lane(Name alias, Table<LaneRecord> aliased) {
        this(alias, aliased, null);
    }

    private Lane(Name alias, Table<LaneRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Lane(Table<O> child, ForeignKey<O, LaneRecord> key) {
        super(child, key, LANE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Qiyanna.QIYANNA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.LANE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<LaneRecord, Integer> getIdentity() {
        return Keys.IDENTITY_LANE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<LaneRecord> getPrimaryKey() {
        return Keys.LANE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<LaneRecord>> getKeys() {
        return Arrays.<UniqueKey<LaneRecord>>asList(Keys.LANE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Lane as(String alias) {
        return new Lane(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Lane as(Name alias) {
        return new Lane(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Lane rename(String name) {
        return new Lane(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Lane rename(Name name) {
        return new Lane(name, null);
    }
}

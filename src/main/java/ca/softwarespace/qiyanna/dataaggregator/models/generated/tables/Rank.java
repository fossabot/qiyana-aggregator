/*
 * This file is generated by jOOQ.
 */
package ca.softwarespace.qiyanna.dataaggregator.models.generated.tables;


import ca.softwarespace.qiyanna.dataaggregator.models.generated.Indexes;
import ca.softwarespace.qiyanna.dataaggregator.models.generated.Keys;
import ca.softwarespace.qiyanna.dataaggregator.models.generated.Qiyanna;
import ca.softwarespace.qiyanna.dataaggregator.models.generated.tables.records.RankRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Rank extends TableImpl<RankRecord> {

    private static final long serialVersionUID = -1482412875;

    /**
     * The reference instance of <code>qiyanna.rank</code>
     */
    public static final Rank RANK = new Rank();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RankRecord> getRecordType() {
        return RankRecord.class;
    }

    /**
     * The column <code>qiyanna.rank.rankid</code>.
     */
    public final TableField<RankRecord, Integer> RANKID = createField("rankid", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('rank_rankid_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>qiyanna.rank.name</code>.
     */
    public final TableField<RankRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(4), this, "");

    /**
     * Create a <code>qiyanna.rank</code> table reference
     */
    public Rank() {
        this(DSL.name("rank"), null);
    }

    /**
     * Create an aliased <code>qiyanna.rank</code> table reference
     */
    public Rank(String alias) {
        this(DSL.name(alias), RANK);
    }

    /**
     * Create an aliased <code>qiyanna.rank</code> table reference
     */
    public Rank(Name alias) {
        this(alias, RANK);
    }

    private Rank(Name alias, Table<RankRecord> aliased) {
        this(alias, aliased, null);
    }

    private Rank(Name alias, Table<RankRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Rank(Table<O> child, ForeignKey<O, RankRecord> key) {
        super(child, key, RANK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Qiyanna.QIYANNA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.RANK_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<RankRecord, Integer> getIdentity() {
        return Keys.IDENTITY_RANK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<RankRecord> getPrimaryKey() {
        return Keys.RANK_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<RankRecord>> getKeys() {
        return Arrays.<UniqueKey<RankRecord>>asList(Keys.RANK_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Rank as(String alias) {
        return new Rank(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Rank as(Name alias) {
        return new Rank(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Rank rename(String name) {
        return new Rank(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Rank rename(Name name) {
        return new Rank(name, null);
    }
}
